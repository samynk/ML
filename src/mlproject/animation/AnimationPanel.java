/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AnimationPanel.java
 *
 * Created on Dec 6, 2011, 9:59:08 AM
 */
package mlproject.animation;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.ItemSelectable;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.geom.Point2D;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import mlproject.fuzzy.FuzzySystem;
import mlproject.fuzzy.FuzzyVariable;
import mlproject.fuzzy.LeftSigmoidMemberShip;
import mlproject.fuzzy.RightSigmoidMemberShip;
import mlproject.fuzzy.SigmoidMemberShip;
import mlproject.fuzzy.SingletonMemberShip;

/**
 *
 * @author Koen
 */
public class AnimationPanel extends javax.swing.JPanel implements ItemSelectable, Runnable {

    private Bone startBone;
    private Bone lowerArmBone;
    private Bone handBone;
    private AnimationTarget target;
    private ArrayList<ItemListener> listeners = new ArrayList<>();
    private Bone selectedBone;
    private boolean paused = true;
    private boolean stepOne = false;
    private boolean free = false;
    private boolean initialized = false;
    private boolean recording = false;

    /** Creates new form AnimationPanel */
    public AnimationPanel() {
        initComponents();

        FuzzySystem system = createUpperArmController();
        //WriteFCL wfcl = new WriteFCL("./behaviours/takebehaviour/upperarm.fcl");
        //wfcl.write(system);

        //wfcl = new WriteFCL("./behaviours/takebehaviour/lowerarm.fcl");
        //wfcl.write(system);

        //wfcl = new WriteFCL("./behaviours/takebehaviour/hand.fcl");
        //wfcl.write(system);


        setBackground(Color.white);
    }

    private void Init() {
        if (!initialized) {
            setUpperArmBone(new Bone("upperArm", new Point2D.Double(100, 100), 100, 80, "./behaviours/takebehaviour/upperarm.fcl", -90, 90));
            setLowerArmBone(new Bone("lowerArm", new Point2D.Double(0, 0), 90, -45, "./behaviours/takebehaviour/lowerarm.fcl", -150, 0));
            setHandBone(new Bone("hand", new Point2D.Double(0, 0), 20, 20, 0, "./behaviours/takebehaviour/hand.fcl", -80, 80));


            getUpperArmBone().addChild(getLowerArmBone());
            getLowerArmBone().addChild(getHandBone());

            target = new AnimationTarget(500, 150, -5, -4);
            initialized = true;
        }
    }

    public void startAnimation() {
        (new Thread(this)).start();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (!initialized) {
            return;
        }
        Graphics2D g2d = (Graphics2D) g;
        getUpperArmBone().draw(g2d);
        target.draw(g2d);

        Point2D.Double targetLoc = getHandBone().getWorldLocation(10, 0);
        g.setColor(Color.green);
        g.fillOval((int) targetLoc.x, (int) targetLoc.y, 5, 5);

        if (!paused || stepOne) {
            target.update();
            getUpperArmBone().update(target, targetLoc);
            getLowerArmBone().update(target, targetLoc);
            getHandBone().update(target, targetLoc);
            
            if ( recording){
                long time = (System.currentTimeMillis()-startTime);
                double upRot = getUpperArmBone().getRotation()*180/Math.PI;
                double lowerRot = getLowerArmBone().getRotation()*180/Math.PI;
                double handRot = getHandBone().getRotation()*180/Math.PI;
                
                Point2D.Double upLoc = getUpperArmBone().getWorldLocation();
                Point2D.Double lowerLoc = getLowerArmBone().getWorldLocation();
                Point2D.Double handLoc = getHandBone().getWorldLocation();
                
                try {
                    bw.write(time+";"+upRot+";" + upLoc.x+";"+upLoc.y+";"+lowerRot+";"+lowerLoc.x+";"+lowerLoc.y+";"+ handRot+";"+handLoc.x+";"+handLoc.y+";"+
                            targetLoc.x +";"+targetLoc.y+";"+target.getLocation().x+";"+target.getLocation().y+"\n");
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }
            }
        }
        if (stepOne) {
            stepOne = false;
            paused = true;
        }
    }

    public void addItemListener(ItemListener il) {
        listeners.add(il);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        // check the bones to see if they were clicked.
        if (getUpperArmBone().isInside(evt.getX(), evt.getY())) {
            selectedBone = getUpperArmBone();
        }
        if (getLowerArmBone().isInside(evt.getX(), evt.getY())) {
            selectedBone = getLowerArmBone();
        }
        if (getHandBone().isInside(evt.getX(), evt.getY())) {
            selectedBone = getHandBone();
        }

        ItemEvent ie = new ItemEvent(this, ItemEvent.ITEM_STATE_CHANGED, selectedBone, ItemEvent.SELECTED);

        for (ItemListener il : listeners) {
            il.itemStateChanged(ie);
        }
    }//GEN-LAST:event_formMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public Object[] getSelectedObjects() {
        return new Object[]{selectedBone};
    }

    @Override
    public void removeItemListener(ItemListener l) {
        listeners.remove(l);
    }

    public void run() {
        while (true) {
            try {
                Thread.sleep(50);
                if (!paused || free) {
                    repaint();
                }
            } catch (InterruptedException ex) {
                //ex.printStackTrace();
            }
        }
    }

    private FuzzySystem createUpperArmController() {
        FuzzySystem angleController = new FuzzySystem("armController", false);

        FuzzyVariable angle = new FuzzyVariable("angle");
        angle.addMemberShip(new LeftSigmoidMemberShip(-15, -5, "FARLEFT"));
        angle.addMemberShip(new SigmoidMemberShip(-15.0f, -5, 0, "LEFT"));
        angle.addMemberShip(new SigmoidMemberShip(-5, 0, 5, "CENTER"));
        angle.addMemberShip(new SigmoidMemberShip(0, 5, 15, "RIGHT"));
        angle.addMemberShip(new RightSigmoidMemberShip(5, 15, "FARRIGHT"));

        angleController.addFuzzyInput(angle);

        FuzzyVariable dAngle = new FuzzyVariable("dAngle");
        dAngle.addMemberShip(new SingletonMemberShip("STAY", 0.0f));
        dAngle.addMemberShip(new SingletonMemberShip("TURNLEFTSLOW", -2.0f));
        dAngle.addMemberShip(new SingletonMemberShip("TURNLEFTFAST", -4.0f));
        dAngle.addMemberShip(new SingletonMemberShip("TURNRIGHTSLOW", 2.0f));
        dAngle.addMemberShip(new SingletonMemberShip("TURNRIGHTFAST", 4.0f));

        angleController.addFuzzyOutput(dAngle);

        angleController.addFuzzyRule("if angle is farleft then dAngle is turnrightfast");
        angleController.addFuzzyRule("if angle is left then dAngle is turnrightslow");
        angleController.addFuzzyRule("if angle is center then dAngle is stay");
        angleController.addFuzzyRule("if angle is right then dAngle is turnleftslow");
        angleController.addFuzzyRule("if angle is farright then dAngle is turnleftfast");

        angle.setCurrentValue(6.5f);
        return angleController;
    }

    public void pause() {
        paused = true;
    }

    public void play() {
        Init();
        paused = false;
    }

    public void stepOne() {
        Init();
        paused = false;
        stepOne = true;
    }

    public void toggleFree() {
        Init();
        free = !free;
    }

    public void reset() {
        Init();
        this.getHandBone().reset();
        this.getLowerArmBone().reset();
        this.getUpperArmBone().reset();
        this.target.reset();
    }

    
    private BufferedWriter bw;
    private long startTime;
    
    public void startRecording(File file) {
        reset();
        
        recording = true;
        try {
            bw = new BufferedWriter(new FileWriter(file));
            bw.write("time;ua_rot;ua_x;ua_y;la_rot;la_x;la_y;hand_rot;hand_x;hand_y;limbtargetx;limbtargety;targetx;targety\n");
            startTime = System.currentTimeMillis();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        play();
    }
    
    public void stopRecording(){
        recording = false;
        if ( bw != null){
            try {
                bw.close();
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        }
        bw = null;
    }

    /**
     * @return the startBone
     */
    public Bone getUpperArmBone() {
        return startBone;
    }

    /**
     * @param startBone the startBone to set
     */
    public void setUpperArmBone(Bone startBone) {
        this.startBone = startBone;
    }

    /**
     * @return the lowerArmBone
     */
    public Bone getLowerArmBone() {
        return lowerArmBone;
    }

    /**
     * @param lowerArmBone the lowerArmBone to set
     */
    public void setLowerArmBone(Bone lowerArmBone) {
        this.lowerArmBone = lowerArmBone;
    }

    /**
     * @return the handBone
     */
    public Bone getHandBone() {
        return handBone;
    }

    /**
     * @param handBone the handBone to set
     */
    public void setHandBone(Bone handBone) {
        this.handBone = handBone;
    }
}
