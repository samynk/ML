/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MultiLayerDialog.java
 *
 * Created on Dec 16, 2011, 9:25:23 AM
 */
package mlproject.layer.gui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import mlproject.layer.MultiLayerNN;
import mlproject.layer.NeuralNetCell;

/**
 *
 * @author Koen
 */
public class MultiLayerDialog extends javax.swing.JDialog {

    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;

    /** Creates new form MultiLayerDialog */
    public MultiLayerDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {

            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    public void setMultiLayerNN(MultiLayerNN multiLayer) {
        multiLayerViewer1.setMultiLayer(multiLayer);
        repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        scrMultiLayer = new javax.swing.JScrollPane();
        multiLayerViewer1 = new mlproject.layer.gui.MultiLayerViewer();
        btnExport = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout multiLayerViewer1Layout = new javax.swing.GroupLayout(multiLayerViewer1);
        multiLayerViewer1.setLayout(multiLayerViewer1Layout);
        multiLayerViewer1Layout.setHorizontalGroup(
            multiLayerViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 413, Short.MAX_VALUE)
        );
        multiLayerViewer1Layout.setVerticalGroup(
            multiLayerViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 291, Short.MAX_VALUE)
        );

        scrMultiLayer.setViewportView(multiLayerViewer1);

        btnExport.setText("Export ...");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrMultiLayer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrMultiLayer, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(btnExport))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        BufferedWriter bw = null;
        try {
            // TODO add your handling code here:
            String currentDir = System.getProperty("user.dir");
            File subdir = new File(currentDir, "responses");
            if (!subdir.exists()) {
                subdir.mkdir();
            }
            File[] existing = subdir.listFiles(new FileFilter() {

                @Override
                public boolean accept(File pathname) {
                    return (pathname.getPath().toLowerCase().endsWith(".res"));
                }
            });
            int maxNumber = 0;
            for (File file : existing) {
                String path = file.getPath();
                int startIndex = path.indexOf('_') + 1;
                int endIndex = path.lastIndexOf('.');
                int number = Integer.parseInt(path.substring(startIndex, endIndex));
                if (number > maxNumber) {
                    maxNumber = number;
                }
            }
            File saveFile = new File(subdir, "response_" + (maxNumber + 1) + ".res");
            bw = new BufferedWriter(new FileWriter(saveFile));
            MultiLayerNN layer = this.multiLayerViewer1.getMultiLayer();
            int inputs = layer.getInputLayer().getNrOfCells();
            if (layer.getInputLayer().hasBiasTerm()) {
                --inputs;
            }

            float[] minima = new float[inputs];
            float[] maxima = new float[inputs];


            bw.write("# name: neural");
            bw.write("\n# type: matrix");
            
            int size = 50;

            if (inputs == 1) {
                bw.write("\n# rows: 1");
                bw.write("\n# columns: ");
                bw.write("\n");
                bw.write(Integer.toString(size));
                for (int i = 0; i < 100; ++i) {
                    for (int celli = 0; celli < inputs; ++celli) {
                        NeuralNetCell cell = layer.getInputLayer().getCellAt(celli);
                        float value = cell.getMinimumInput() + (cell.getMaximumInput() - cell.getMinimumInput()) * i *(1.0f/ size);
                        cell.setOutput(value);
                        bw.write(Float.toString(value));
                        bw.write(" ");
                    }
                    layer.forward();
                    bw.write(Float.toString(layer.getOutputLayer().getOutput(0)));
                    bw.write("\n");
                }
            } else if (inputs == 2) {
                /*
                NeuralNetCell d1_cell = layer.getInputLayer().getCellAt(1);
                bw.write(" 0");
                for (int d1 = 0; d1 < 100; ++d1) {
                    float d1_input = d1_cell.getMinimumInput() + (d1_cell.getMaximumInput() - d1_cell.getMinimumInput()) * d1 / 100.0f;
                    bw.write(";");
                    bw.write(Float.toString(d1_input));
                }
                bw.write("\n");
                */
                bw.write("\n# rows: ");
            bw.write(Integer.toString(size));
            bw.write("\n# columns: ");
            bw.write(Integer.toString(size));
            bw.write("\n");
            
                for (int d1 = 0; d1 < size; ++d1) {
                    NeuralNetCell cell = layer.getInputLayer().getCellAt(0);
                    float value = cell.getMinimumInput() + (cell.getMaximumInput() - cell.getMinimumInput()) * d1 *(1.0f/ size);
                    cell.setOutput(value);

                    for (int d2 = 0; d2 < size; ++d2) {
                        NeuralNetCell cell2 = layer.getInputLayer().getCellAt(1);
                        float value2 = cell2.getMinimumInput() + (cell2.getMaximumInput() - cell2.getMinimumInput()) * d2 *(1.0f/ size);
                        cell2.setOutput(value2);

                        layer.forward();
                        
                        bw.write(Float.toString(layer.getOutputLayer().getOutput(0)));
                        bw.write(" ");
                    }
                    if (d1 != size-1) {
                        bw.write("\n");
                    }
                }
            }
            bw.close();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {
                bw.close();
            } catch (IOException ex) {
            }
        }



    }//GEN-LAST:event_btnExportActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MultiLayerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MultiLayerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MultiLayerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MultiLayerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MultiLayerDialog dialog = new MultiLayerDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JButton cancelButton;
    private mlproject.layer.gui.MultiLayerViewer multiLayerViewer1;
    private javax.swing.JButton okButton;
    private javax.swing.JScrollPane scrMultiLayer;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
}
