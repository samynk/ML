/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MultiLayerViewer.java
 *
 * Created on Dec 15, 2011, 3:20:51 PM
 */
package mlproject.layer.gui;

import java.awt.Color;
import java.awt.Graphics;
import java.text.DecimalFormat;
import mlproject.layer.MultiLayerNN;
import mlproject.layer.NeuralNetCell;
import mlproject.layer.NeuralNetworkLayer;

/**
 *
 * @author Koen
 */
public class MultiLayerViewer extends javax.swing.JPanel {

    private MultiLayerNN model;
    
    private static Color[] layerColors;
    
    private boolean isInput;
    
    private int xSpace = 150;
    private int ySpace = 100;
    static{
        layerColors = new Color[5];
        layerColors[0] = new Color(255,24,24,127);
        layerColors[1] = new Color(24,255,24,127);
        layerColors[2] = new Color(127,127,127,127);
        layerColors[3] = new Color(24,24,255,127);
        layerColors[4] = new Color(127,127,24,127);
        
    }
    
    DecimalFormat myFormatter = new DecimalFormat("###.##");
    
    /** Creates new form MultiLayerViewer */
    public MultiLayerViewer() {
        System.out.println("creating multilayer view");
        initComponents();
    }
    
    public void setMultiLayer(MultiLayerNN model){
        System.out.println("setting model to : "+ model);
        this.model = model;
    }
    
    @Override 
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        if ( model == null)
            return;
        int x = 0;
        for (int i = 0; i < model.getNrOfLayers(); ++i){
            paintLayerConnections(g,x,i,model.getLayer(i));
            x+= xSpace;
        }
        x = 0;
        for (int i = 0; i < model.getNrOfLayers(); ++i){
            paintLayerNodes(g,x,i,model.getLayer(i));
            x+= xSpace;
        }
    }
    
    public void paintLayerConnections(Graphics g, int x, int layerID,NeuralNetworkLayer layer)
    {   
        int y = 30;
        
        for (int i = 0; i < layer.getNrOfCells(); ++i){
            NeuralNetCell cell = layer.getCellAt(i);
            for ( int cwi = 0; cwi < cell.getNrOfWeights(); ++cwi){
                float weight = cell.getWeight(cwi);
                if ( !cell.isBiasTerm() &&  Math.abs(weight) > 1e-4){
                    int startx = x+15;
                    int starty = y+5;
                    
                    int endx = x +15 - xSpace;
                    int endy = 30 + cwi*ySpace + 5;
                    g.setColor(Color.ORANGE);
                    g.drawLine(startx,starty,endx,endy);
                    
                    String weightString = myFormatter.format(weight);
                    int width = g.getFontMetrics().stringWidth(weightString);
                    
                    int labelx = startx + (endx-startx)/4 - width/2;
                    int labely = starty + (endy-starty)/4;
                    g.setColor(Color.black);
                    g.drawString(weightString, labelx, labely);
                    
                }
            }
            y+=ySpace;
        }
    }
    
    public void paintLayerNodes(Graphics g, int x, int layerID,NeuralNetworkLayer layer)
    {
        String name = layer.getName();
        if ( name != null)
            g.drawString(layer.getName(),x, 10);
        
        int y = 30;
        
        for (int i = 0; i < layer.getNrOfCells(); ++i){
            NeuralNetCell cell = layer.getCellAt(i);
            
             name = cell.getName();
            if( name == null)
                name = Integer.toString(i);
            
            int width = g.getFontMetrics().stringWidth(name);
            g.setColor(Color.black);
            g.drawString(name,x+15 - width/2,y-8);
            
            g.setColor(layerColors[layerID%layerColors.length]);
            g.fillOval(x+5, y-5, 20 ,20);
            g.setColor(Color.black);
            g.drawOval(x+5, y-5, 20, 20);
            
            y+=ySpace;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public MultiLayerNN getMultiLayer() {
        return model;
    }
}
