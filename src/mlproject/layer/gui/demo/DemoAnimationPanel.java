/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AnimationPanel.java
 *
 * Created on Dec 6, 2011, 9:59:08 AM
 */
package mlproject.layer.gui.demo;

import mlproject.animation.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.ItemSelectable;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.geom.Point2D;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import mlproject.fuzzy.FuzzySystem;
import mlproject.fuzzy.FuzzyVariable;
import mlproject.fuzzy.LeftSigmoidMemberShip;
import mlproject.fuzzy.RightSigmoidMemberShip;
import mlproject.fuzzy.SigmoidMemberShip;
import mlproject.fuzzy.SingletonMemberShip;

/**
 *
 * @author Koen
 */
public class DemoAnimationPanel extends javax.swing.JPanel implements ItemSelectable, Runnable {

    private Bone demoBone;
    private AnimationTarget target;
    private ArrayList<ItemListener> listeners = new ArrayList<>();
    private Bone selectedBone;
    private boolean paused = true;
    private boolean stepOne = false;
    private boolean free = false;
    private boolean initialized = false;
    private boolean recording = false;
    private double previousVelocity = 0.0f;
    private double currentVelocity = 0.0f;
    private double currentAcceleration = 0.0f;

    /**
     * Creates new form AnimationPanel
     */
    public DemoAnimationPanel() {
        initComponents();

        //FuzzySystem system = createUpperArmController();
        //WriteFCL wfcl = new WriteFCL("./behaviours/takebehaviour/upperarm.fcl");
        //wfcl.write(system);

        //wfcl = new WriteFCL("./behaviours/takebehaviour/lowerarm.fcl");
        //wfcl.write(system);

        //wfcl = new WriteFCL("./behaviours/takebehaviour/hand.fcl");
        //wfcl.write(system);


        setBackground(Color.white);
        setDoubleBuffered(false);

        Init();


    }

    private void Init() {
        if (!initialized) {
            Controller c = new EaseInEaseOutController(5.0f, 45, 80);
            demoBone = new Bone("upperArm", new Point2D.Double(100, 100), 100, 80, "./behaviours/demo/simple.fcl", -90, 90);
            //demoBone = new Bone("upperArm", new Point2D.Double(100, 100), 100, 80, c, -90, 90);

            target = new AnimationTarget(200, 150, 0, 0);
            target.setUseGravity(false);
            initialized = true;

            selectedBone = demoBone;


            Thread t = new Thread(this);
            t.start();
        }
    }

    public void startAnimation() {
        (new Thread(this)).start();
    }

    @Override
    public void paintComponent(Graphics g) {
        System.out.println("Painting window");
        super.paintComponent(g);
        if (!initialized) {
            return;
        }
        Graphics2D g2d = (Graphics2D) g;


        Point2D.Double targetLoc = demoBone.getEndLocation();
        //System.out.println("Target loc is : " + targetLoc);
        g.setColor(Color.green);
        g.fillOval((int) targetLoc.x, (int) targetLoc.y, 5, 5);

        if (!paused || stepOne) {

            double currentRot = demoBone.getRotation() * 180 / Math.PI;
            previousVelocity = currentVelocity;

            target.update();
            demoBone.update(target, targetLoc);

            if (recording) {

                double demoRot = demoBone.getRotation() * 180 / Math.PI;
                currentVelocity = (demoRot - currentRot) / 0.050;
                currentAcceleration = (currentVelocity - previousVelocity) / 0.050;

                Point2D.Double upLoc = demoBone.getWorldLocation();
                try{
                    bw.write(demoBone.getTime() + ";" + demoRot + ";" + targetLoc.distance(target.getLocation()) + ";" + currentVelocity + ";" + currentAcceleration + ";\n");
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }
            }
        }
        demoBone.draw(g2d);
        target.draw(g2d);

        if (stepOne) {
            stepOne = false;
            paused = true;
        }
    }

    @Override
    public void addItemListener(ItemListener il) {
        listeners.add(il);

        if (selectedBone != null) {
            ItemEvent ie = new ItemEvent(this, ItemEvent.ITEM_STATE_CHANGED, selectedBone, ItemEvent.SELECTED);
            il.itemStateChanged(ie);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        // check the bones to see if they were clicked.
        if (demoBone == null) {
            return;
        }

        if (demoBone.isInside(evt.getX(), evt.getY())) {
            selectedBone = demoBone;
        }

        ItemEvent ie = new ItemEvent(this, ItemEvent.ITEM_STATE_CHANGED, selectedBone, ItemEvent.SELECTED);

        for (ItemListener il : listeners) {
            il.itemStateChanged(ie);
        }
    }//GEN-LAST:event_formMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public Object[] getSelectedObjects() {
        return new Object[]{selectedBone};
    }

    @Override
    public void removeItemListener(ItemListener l) {
        listeners.remove(l);
    }

    @Override
    public void run() {
        while (true) {
            try {
                Thread.sleep(50);
                if (!paused || free) {
                    repaint();
                }
            } catch (InterruptedException ex) {
                //ex.printStackTrace();
            }
        }
    }

    public void pause() {
        paused = true;
    }

    public void play() {
        Init();
        paused = false;
    }

    public void stepOne() {
        Init();
        paused = false;
        stepOne = true;
    }

    public void toggleFree() {
        Init();
        free = !free;
    }

    public void reset() {
        Init();
        demoBone.reset();
        this.target.reset();
    }
    private BufferedWriter bw;
    private long startTime;

    public void startRecording(File file) {
        reset();

        recording = true;
        try {
            bw = new BufferedWriter(new FileWriter(file));
            bw.write("time;angle;distance;velocity;acceleration\n");
            startTime = System.currentTimeMillis();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        play();
    }

    public void stopRecording() {
        recording = false;
        if (bw != null) {
            try {
                bw.close();
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        }
        bw = null;
    }
}
