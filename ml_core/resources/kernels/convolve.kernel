__kernel void convolution(
    const __global float* input,
    __constant float* filter,
    __global float* output,
    const int2 iDim,
    const int2 fDim,
    const int2 oDim
)
{
    int gCol = get_global_id(0);
    int gRow = get_global_id(1);
    

    
    
    

    float sum = 0;
    // column major
    // frow is row coordinate of filter 

    for(int fRow = 0;  fRow < fDim.y; ++fRow){
        int inputRow = gRow + fRow;   
        for(int fCol = 0;fCol< fDim.x;++fCol){
            int inputCol = gCol + fCol;
            int inputColOffset = inputCol * iDim.y;
            int inputI = inputRow  + inputColOffset;
            
            int filterColOffset = fCol * fDim.y;
            int filterI = fRow + filterColOffset;
            sum += input[inputI] * filter[filterI];
        }
    }
    output[ gRow + gCol * oDim.y ] = sum;
}

__kernel void batchConvolution(
    const __global float* input,
    __constant float* filter,
    __global float* output,
    const int2 iDim,
    const int2 fDim,
    const int2 oDim
)
{
    int gCol = get_global_id(0);
    int gRow = get_global_id(1);
    int filterNr = get_global_id(2);

   
   
    int filterSliceOffset = fDim.x * fDim.y * filterNr;
    int outputSliceOffset = oDim.x * oDim.y * filterNr;

    float sum = 0;
    for(int fRow = 0;  fRow < fDim.y; ++fRow){
        int inputRow = gRow + fRow;   
        for(int fCol = 0;fCol< fDim.x;++fCol){
            int inputCol = gCol + fCol;
            int inputColOffset = inputCol * iDim.y;
            int inputI = inputRow  + inputColOffset;
            
            int filterColOffset = fCol * fDim.y;
            int filterI = fRow + filterColOffset + filterSliceOffset ;
            sum += input[inputI] * filter[filterI];
        }
    }
    output[ gRow + gCol * oDim.y + outputSliceOffset ] = sum;
}